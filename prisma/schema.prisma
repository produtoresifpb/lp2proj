datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  cpf               String?             @unique
  birthDate         DateTime?
  registerDate      DateTime            @default(now())
  profile           Profile             @default(PUBLIC)
  InscricoesEventos InscricoesEventos[]
  EditaisFavoritos  Notice[]
}

model Notice {
  id                    Int              @id @default(autoincrement())
  title                 String           @unique
  organizador           String
  description           String
  support               supportType
  artisticCategory      artisticCategory
  subscriptionDeadline  DateTime
  detalhesFinanciamento String
  valorFinanciamento    Float
  criteriosSelecao      String
  processoInscricao     String
  dataPublicacao        DateTime         @default(now())
  FeedbackNotice        FeedbackNotice[]
  users User[]
}


model FeedbackNotice {
  id                 Int      @id @default(autoincrement())
  userName           String
  userEmail          String
  problemSubject     Subjects
  problemDescription String
  Notice             Notice   @relation(fields: [noticeID], references: [id])
  noticeID           Int
}

model Evento {
  EventoID          Int                 @id @default(autoincrement())
  NomeEvento        String
  Descricao         String?
  DataHora          DateTime
  Localizacao       String
  Organizador       String
  InfoIngresso      String?
  ImagemCartaz      String?
  DataPublicacao    DateTime
  InscricoesEventos InscricoesEventos[]
}

model InscricoesEventos {
  InscricaoEventoID Int      @id @default(autoincrement())
  Evento            Evento   @relation(fields: [EventoID], references: [EventoID])
  EventoID          Int
  Usuario           User     @relation(fields: [UsuarioID], references: [id])
  UsuarioID         Int
  DataInscricao     DateTime
}

model ProjetosColaborativos {
  ProjetoID             Int      @id @default(autoincrement())
  Titulo                String
  Descricao             String
  AreaAtuacaoNecessaria String
  Localizacao           String?
  TipoColaboracao       String
  CriadorID             Int
  DataCriacao           DateTime
}

//------------------------------------------------------------------------//

enum Profile {
  PUBLIC
  ARTIST
  MANAGER
}

enum artisticCategory {
  MUSIC
  THEATER
  DANCE
  ARTS
}

enum supportType {
  FINANCIAL
  LOGISTIC
}

enum Subjects {
  informationOutdated
  informationWrong
  error
  other
}
